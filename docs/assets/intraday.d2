# Direction: right
# Theme: neutral-gray

# Define system components within containers
InternalSystems: {
  Backend: Backend Service
  Database: Database (Cache)
}

ExternalSystems: {
  Client
  ExternalAPI: External API (yfinance)
}

# Sequence starts with a client request
ExternalSystems.Client -> InternalSystems.Backend: GET /ticker/\{ticker\}/intraday|intraweek

# Backend checks market status first
InternalSystems.Backend -> InternalSystems.Backend: Check market status

alt {
  "Market is Closed": {
    InternalSystems.Backend -> InternalSystems.Database: Query for most recent data
    InternalSystems.Database -> InternalSystems.Backend: Return cached data
  }

  "Market is Open": {
    InternalSystems.Backend -> InternalSystems.Database: Query for latest data timestamp

    alt {
      "Data is Fresh": {
        InternalSystems.Database -> InternalSystems.Backend: Return fresh cached data
      }

      "Data is Stale or Missing": {
        InternalSystems.Database -> InternalSystems.Backend: Return stale/no data
        InternalSystems.Backend -> ExternalSystems.ExternalAPI: Request latest price data
        ExternalSystems.ExternalAPI -> InternalSystems.Backend: Return new data
        InternalSystems.Backend -> InternalSystems.Database: Store new data
        InternalSystems.Database -> InternalSystems.Backend: Return newly stored data
      }
    }
  }
}

# Final response to the client
InternalSystems.Backend -> ExternalSystems.Client: 200 OK (with data)